#!/usr/bin/env python

import argparse, socket, time, json, select, struct, math,copy

#DEBUG = True
DEBUG = False

parser = argparse.ArgumentParser(description='route packets')
parser.add_argument('networks', metavar='networks', type=str, nargs='+', help="networks")
args = parser.parse_args()

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"


##########################################################################################
def checkIPinNet(ip, network, netmask):
    ipArray = [int(x) for x in ip.split(".")]
    netArray = [int(x) for x in network.split(".")]
    maskArray = [int(x) for x in netmask.split(".")]
    for x in range(0,4):
        c1 = ipArray[x] & maskArray[x]
        c2 = netArray[x] & maskArray[x]
        if(c1 != c2):
            return False
    return True

class Router:

    routes = None
    updates = None
    relations = None
    sockets = None

    def __init__(self, networks):
        #{ip:[{msg:}...] ....}
        self.routes = {}
        #{ip:[{msg:}...] ....}
        self.updates = {}
        self.relations = {}
        self.sockets = {}
        for relationship in networks:
            network, relation = relationship.split("-")
            if DEBUG: 
                print "Starting socket for", network, relation
            self.sockets[network] = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
            self.sockets[network].setblocking(0)
            self.sockets[network].connect(network)
            self.relations[network] = relation
        return
    
    def lookup_routes(self, daddr):
        """ Lookup all valid routes for an address """
        # TODO
        outroutes = []
        
        for k in self.routes.keys():
            for msg in self.routes[k]:
                net=msg["network"]
                mask=msg["netmask"]
                if checkIPinNet(daddr, net, mask):
                    temp=copy.deepcopy(msg)
                    temp["addr"]=k
                    outroutes.append(temp)
        #            print(temp['origin'])
        #print(daddr)
        #print(outroutes)
        return outroutes
    
    def get_shortest_as_path(self, routes):
        """ select the route with the shortest AS Path """
        # TODO
        shortest=100
        idx=[]
        for i in range(len(routes)):
            target=routes[i]
            if len(target["ASPath"]) < shortest:
                shortest=len(target["ASPath"])
                idx=[i]
            elif len(target["ASPath"]) == shortest:
                idx.append(i)
            else:
                continue
        outroutes = []
        for i in idx:
            outroutes.append(routes[i])
        return outroutes

    def get_highest_preference(self, routes):
        """ select the route with the shortest AS Path """
        highest=0
        idx=[]
        for i in range(len(routes)):
            target=routes[i]
            if int(target["localpref"]) > int(highest):
                highest=target["localpref"]
                idx=[i]
            elif int(target["localpref"]) == int(highest):
                idx.append(i)
            else:
                continue
        outroutes = []
        for i in idx:
            outroutes.append(routes[i])
        return outroutes
    
    def get_self_origin(self, routes):
        """ select self originating routes """
        # TODO
        #print(routes)
        #print("after")
        outroutes = []
        for i in routes:
            if i["selfOrigin"]=='True':
                outroutes.append(i)
        if len(outroutes)==0:
            return routes
        else:
            return outroutes


    def get_origin_routes(self, routes):
        """ select origin routes: EGP > IGP > UNK """
        # TODO
        order={ "IGP": 3,"EGP": 2, "UNK": 1}
        highest=0
        idx=[]
        for i in range(len(routes)):
            target=routes[i]["origin"]
            rank=order[target]
            #print(rank)
            if rank > highest:
                highest = rank
                idx=[i]
            elif rank == highest:
                idx.append(i)
            else:
                continue
        outroutes = []
        for i in idx:
            outroutes.append(routes[i])
        if len(outroutes)==0:
            return routes
        else:
            return outroutes

    def filter_relationships(self, srcif, routes):
        """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
        outroutes = []
        return outroutes
    
    def parse_ip(self, ip):
        temp=ip.split(".")
        for sec in temp:
            while(len(sec)<3):
                 sec="0"+sec
        result=""
        for sec in temp:
            result+=sec
        return result


    def lowest_ip_routes(self, routes):
        low=self.parse_ip(routes[0]["addr"])
        idx=0
        if len(routes)==1:
           return routes
        else:
           for i in range(1, len(routes)):
               if self.parse_ip(routes[i]["addr"])<low:
                  idx=i
           return [routes[idx]]

    def get_route(self, srcif, daddr):
        """	Select the best route for a given address	"""
        # TODO
        peer = None
        routes = self.lookup_routes(daddr)
        # Rules go here
        if routes:
            # 1. Highest Preference
            routes = self.get_highest_preference(routes)
            # 2. Self Origin
            routes = self.get_self_origin(routes)
            # 3. Shortest ASPath
            routes = self.get_shortest_as_path(routes)
            # 4. EGP > IGP > UNK
            #print(routes)
            routes = self.get_origin_routes(routes)
            # 5. Lowest IP Address
            routes = self.lowest_ip_routes(routes)
            # TODO
            # Final check: enforce peering relationships
            # routes = self.filter_relationships(srcif, routes)
        #return self.sockets[peer] if peer else None
        #print(routes)
        return routes[0]["addr"]
         
    def forward(self, srcif, packet):
        #print(self.routes)
        """	Forward a data packet	"""
        #TODO: really dangerous, please check if route=[] later
        route = self.get_route(srcif, packet["dst"])
        sock=self.sockets[route]
        try:
            sock.sendall(json.dumps(packet))
        except:
            print("forward failed")
        
        return

    def coalesce(self):
        """	coalesce any routes that are right next to each other	"""
        # TODO (this is the most difficult task, save until last)
        return False
    def update(self, srcif, packet):
        #add entry to routes
        msg= packet["msg"]
        if(srcif in self.updates.keys()):
            self.updates[srcif].append(msg)
        else:
            self.updates[srcif] = [msg]
        #check if src is already in routes
        if(srcif in self.routes.keys()):
            self.routes[srcif].append(msg)
        else:
            self.routes[srcif] = [msg]
        
        #send packets to neighbours
        for ip in self.sockets:
            if ip != srcif:
                sock = self.sockets[ip]
                send=packet.copy()
                send["src"]=send["dst"]
                send["dst"]=ip
                try:
                    sock.sendall(json.dumps(send))
                except:
                    print("send error")
                finally:
                    del send
        return;

 
    def revoke(self, packet):
        """	handle revoke packets	"""
        # TODO
        target = self.routes[packet["src"]]
        idx=[]
        for i in range(len(target)):
            item=target[i]
            for rev in packet["msg"]:
                if rev["network"]==item["network"] and rev["netmask"]==item["netmask"]:
                    idx.append(i)
        idx.sort()
        while len(idx)>0:
            del target[idx[0]]
            del idx[0]
            idx=list(map(lambda x: x-1, idx))    
        
        #send packets to neighbours
        for ip in self.sockets:
            if ip != packet["src"]:
                sock = self.sockets[ip]
                send=copy.deepcopy(packet)
                send["src"]=send["dst"]
                send["dst"]=ip
                try:
                    sock.sendall(json.dumps(send))
                    del send
                except:
                    print("send error")
                
        return True

    def dump(self, packet):
        tableContent = {
                "src": packet["dst"],
                "dst": packet["src"],
                "type": "table",
                "msg": []
        }
        
        #include router message inside of table message
        for ip in self.routes:
            for item in self.routes[ip]:
                 tableContent["msg"].append({"network": item["network"],
                                             "netmask": item["netmask"],
                                             "peer": ip})
        try:
            self.sockets[packet["src"]].sendall(json.dumps(tableContent))
        except:
            print("Forwarding message fail")
        return 



    def handle_packet(self, srcif, packet):
        typ=packet["type"]
        if typ=="update":
            self.update(srcif, packet)
            return;
        if typ=="dump":
            self.dump(packet)
            return;
        if typ=="no route":
            #TODO
            return
        if typ=="revoke":
            self.revoke(packet)
            return
        if typ=="data":
            self.forward(srcif, packet);
            return
        else:
            exit(1)
    
    def send_error(self, conn, msg):
        """ Send a no_route error message """
        # TODO
        return

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                try:
                    k = conn.recv(65535)
                except:
                    # either died on a connection reset, or was SIGTERM's by parent
                    return
                if k:
                    for sock in self.sockets:
                        if self.sockets[sock] == conn:
                            srcif = sock
                    msg = json.loads(k)
                    if not self.handle_packet(srcif, msg):
                        self.send_error(conn, msg)
                else:
                    return
        return

if __name__ == "__main__":
    router = Router(args.networks)
    router.run()
